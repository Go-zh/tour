流程控制语句：for、if、else、switch 和 defer
学习如何使用条件、循环、分支和推迟语句来控制代码的流程。

Go 作者组编写，Go-zh 小组翻译。
https://go-zh.org

* for

Go 只有一种循环结构： `for` 循环。

基本的 `for` 循环由三部分组成，它们用分号隔开：

- 初始化语句：在第一次迭代前执行
- 条件表达式：在每次迭代前求值
- 后置语句：在每次迭代的结尾执行

初始化语句通常为一句短变量声明，该变量声明仅在 `for` 语句的作用域中可见。

*注意*：和 C、Java、JavaScript 之类的语言不同，Go 的 for 语句后面没有小括号，大括号
`{`}` 则是必须的。

.play flowcontrol/for.go

* for（续）

初始化语句和后置语句是可选的。

.play flowcontrol/for-continued.go

* for 是 Go 中的 “while”

此时你可以去掉分号：C 的 `while` 在 Go 中叫做 `for` 。

.play flowcontrol/for-is-gos-while.go

* 无限循环

如果省略循环条件，该循环就不会结束，因此无限循环可以写得很紧凑。

.play flowcontrol/forever.go

* if

Go 的 `if` 语句与 `for` 循环类似，表达式外无需小括号 `(`)` ，而大括号 `{`}` 则是必须的。

.play flowcontrol/if.go

* if 的简短语句

同 `for` 一样， `if` 语句可以在条件表达式前执行一个简单的语句。

该语句声明的变量作用域仅在 `if` 之内。

（在最后的 `return` 语句处使用 `v` 看看。）

.play flowcontrol/if-with-a-short-statement.go

* if 和 else

在 `if` 的简短语句中声明的变量同样可以在任何对应的 `else` 块中使用。

（在 `main` 的 `fmt.Println` 调用开始前，两次对 `pow` 的调用均已执行并返回。）

.play flowcontrol/if-and-else.go

* 练习：循环与函数

我们来简单练习一下函数和循环：用牛顿法实现平方根函数。

在本例中，牛顿法是通过选择一个起点 _z_ 然后重复以下过程来求 `Sqrt(x)` 的近似值：

.image /content/img/newton.png

为此只需重复计算 10 次，并且观察不同的值（1，2，3，……）是如何逐步逼近结果的。
然后，修改循环条件，使得当值停止改变（或改变非常小）的时候退出循环。观察迭代次数是否变化。结果与 [[https://go-zh.org/pkg/math/#Sqrt][math.Sqrt]] 接近吗？

提示：用类型转换或浮点数语法来声明并初始化一个浮点数值：

	z := float64(1)
	z := 1.0

.play flowcontrol/exercise-loops-and-functions.go

* switch

你大概已经知道 `switch` 语句的样子了。

除非以 `fallthrough` 语句结束，否则分支会自动终止。

.play flowcontrol/switch.go

* switch 的求值顺序

switch 的 case 语句从上到下顺次执行，直到匹配成功时停止。

（例如，

	switch i {
	case 0:
	case f():
	}

在 `i==0` 时 `f` 不会被调用。）

#appengine: *注意：* Go 练习场中的时间总是从 2009-11-10 23:00:00 UTC 开始，
#appengine: 该值的意义就作为一个练习留给读者完成。

.play flowcontrol/switch-evaluation-order.go

* 没有条件的 switch

没有条件的 switch 同 `switch`true` 一样。

这种形式能将一长串 if-then-else 写得更加清晰。

.play flowcontrol/switch-with-no-condition.go

* defer

defer 语句会将函数推迟到外层函数返回之后执行。

推迟调用的函数其参数会立即求值，但直到外层函数返回前该函数都不会被调用。

.play flowcontrol/defer.go

* defer 栈

推迟的函数调用会被压入一个栈中。
当外层函数返回时，被推迟的函数会按照后进先出的顺序调用。

更多关于 defer 语句的信息，
请阅读[[http://blog.go-zh.org/defer-panic-and-recover][此博文]]。

.play flowcontrol/defer-multi.go

* 恭喜！

你已经完成了本课程！

你可以返回[[/list][模块]]列表看看接下来学习什么，也可以继续[[javascript:click('.next-page')][后面的课程]]。
