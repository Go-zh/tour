流程控制语句：for、if、else 、switch 和 defer
学习如何用条件、循环、开关和推迟语句控制代码的流程。

Go 作者组编写，Go-zh 小组翻译。
https://go-zh.org

* for

Go 只有一种循环结构—— `for` 循环。

基本的 `for` 循环除了没有了 `(`)` 之外（甚至强制不能使用它们），看起来跟 C 或者 Java 中做的一样，而 `{`}` 是必须的。

.play flowcontrol/for.go

* for（续）

跟 C 或者 Java 中一样，可以让前置、后置语句为空。

.play flowcontrol/for-continued.go

* for 是 Go 的 “while”

基于此可以省略分号：C 的 `while` 在 Go 中叫做 `for` 。

.play flowcontrol/for-is-gos-while.go

* 死循环

如果省略了循环条件，循环就不会结束，因此可以用更简洁地形式表达死循环。

.play flowcontrol/forever.go

* if

`if` 语句除了没有了 `(`)` 之外（甚至强制不能使用它们），看起来跟 C 或者 Java 中的一样，而 `{`}` 是必须的。

（耳熟吗？）

.play flowcontrol/if.go

* if 的便捷语句

跟 `for` 一样， `if` 语句可以在条件之前执行一个简单的语句。

由这个语句定义的变量的作用域仅在 `if` 范围之内。

（在最后的 `return` 语句处使用 `v` 看看。）

.play flowcontrol/if-with-a-short-statement.go

* if 和 else

在 `if` 的便捷语句定义的变量同样可以在任何对应的 `else` 块中使用。

.play flowcontrol/if-and-else.go

* 练习：循环和函数

作为练习函数和循环的简单途径，用牛顿法实现开方函数。

在这个例子中，牛顿法是通过选择一个初始点 _z_ 然后重复这一过程求 `Sqrt(x)` 的近似值：

.image /content/img/newton.png

为了做到这个，只需要重复计算 10 次，并且观察不同的值（1，2，3，……）是如何逐步逼近结果的。
然后，修改循环条件，使得当值停止改变（或改变非常小）的时候退出循环。观察迭代次数是否变化。结果与 [[https://go-zh.org/pkg/math/#Sqrt][math.Sqrt]] 接近吗？

提示：定义并初始化一个浮点值，向其提供一个浮点语法或使用转换：

	z := float64(1)
	z := 1.0

.play flowcontrol/exercise-loops-and-functions.go

* switch

你可能已经知道 `switch` 语句会长什么样了。

除非以 `fallthrough` 语句结束，否则分支会自动终止。

.play flowcontrol/switch.go

* switch 的执行顺序

switch 的条件从上到下的执行，当匹配成功的时候停止。

（例如，

	switch i {
	case 0:
	case f():
	}

当 `i==0` 时不会调用 `f` 。）

#appengine: 注意：Go playground 中的时间总是从 2009-11-10 23:00:00 UTC 开始，
#appengine: 如何校验这个值作为一个练习留给读者完成。

.play flowcontrol/switch-evaluation-order.go

* 没有条件的 switch

没有条件的 switch 同 `switch`true` 一样。

这一构造使得可以用更清晰的形式来编写长的 if-then-else 链。

.play flowcontrol/switch-with-no-condition.go

* defer

defer 语句会延迟函数的执行直到上层函数返回。

延迟调用的参数会立刻生成，但是在上层函数返回前函数都不会被调用。

.play flowcontrol/defer.go

* defer 栈

延迟的函数调用被压入一个栈中。当函数返回时，
会按照后进先出的顺序调用被延迟的函数调用。

阅读[[http://blog.go-zh.org/defer-panic-and-recover][博文]]了解更多关于 defer 语句的信息。

.play flowcontrol/defer-multi.go

* 恭喜！

你已经完成了本课程！

你可以返回[[/list][模块]]列表看看接下来学习什么，或者继续[[javascript:click('.next-page')][后面的课程]]。
